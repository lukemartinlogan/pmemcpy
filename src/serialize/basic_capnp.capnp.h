// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: basic_capnp.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(bdce02776b25734f);

}  // namespace schemas
}  // namespace capnp


struct PrimitiveData {
  PrimitiveData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    D8,
    D16,
    D32,
    D64,
    U8,
    U16,
    U32,
    U64,
    F32,
    F64,
    D8_ARR,
    D16_ARR,
    D32_ARR,
    D64_ARR,
    U8_ARR,
    U16_ARR,
    U32_ARR,
    U64_ARR,
    F32_ARR,
    F64_ARR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdce02776b25734f, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PrimitiveData::Reader {
public:
  typedef PrimitiveData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isD8() const;
  inline  ::int8_t getD8() const;

  inline bool isD16() const;
  inline  ::int16_t getD16() const;

  inline bool isD32() const;
  inline  ::int32_t getD32() const;

  inline bool isD64() const;
  inline  ::int64_t getD64() const;

  inline bool isU8() const;
  inline  ::uint8_t getU8() const;

  inline bool isU16() const;
  inline  ::uint16_t getU16() const;

  inline bool isU32() const;
  inline  ::uint32_t getU32() const;

  inline bool isU64() const;
  inline  ::uint64_t getU64() const;

  inline bool isF32() const;
  inline float getF32() const;

  inline bool isF64() const;
  inline double getF64() const;

  inline bool isD8Arr() const;
  inline bool hasD8Arr() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getD8Arr() const;

  inline bool isD16Arr() const;
  inline bool hasD16Arr() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getD16Arr() const;

  inline bool isD32Arr() const;
  inline bool hasD32Arr() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getD32Arr() const;

  inline bool isD64Arr() const;
  inline bool hasD64Arr() const;
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader getD64Arr() const;

  inline bool isU8Arr() const;
  inline bool hasU8Arr() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getU8Arr() const;

  inline bool isU16Arr() const;
  inline bool hasU16Arr() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getU16Arr() const;

  inline bool isU32Arr() const;
  inline bool hasU32Arr() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getU32Arr() const;

  inline bool isU64Arr() const;
  inline bool hasU64Arr() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getU64Arr() const;

  inline bool isF32Arr() const;
  inline bool hasF32Arr() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getF32Arr() const;

  inline bool isF64Arr() const;
  inline bool hasF64Arr() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getF64Arr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PrimitiveData::Builder {
public:
  typedef PrimitiveData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isD8();
  inline  ::int8_t getD8();
  inline void setD8( ::int8_t value);

  inline bool isD16();
  inline  ::int16_t getD16();
  inline void setD16( ::int16_t value);

  inline bool isD32();
  inline  ::int32_t getD32();
  inline void setD32( ::int32_t value);

  inline bool isD64();
  inline  ::int64_t getD64();
  inline void setD64( ::int64_t value);

  inline bool isU8();
  inline  ::uint8_t getU8();
  inline void setU8( ::uint8_t value);

  inline bool isU16();
  inline  ::uint16_t getU16();
  inline void setU16( ::uint16_t value);

  inline bool isU32();
  inline  ::uint32_t getU32();
  inline void setU32( ::uint32_t value);

  inline bool isU64();
  inline  ::uint64_t getU64();
  inline void setU64( ::uint64_t value);

  inline bool isF32();
  inline float getF32();
  inline void setF32(float value);

  inline bool isF64();
  inline double getF64();
  inline void setF64(double value);

  inline bool isD8Arr();
  inline bool hasD8Arr();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getD8Arr();
  inline void setD8Arr( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setD8Arr(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initD8Arr(unsigned int size);
  inline void adoptD8Arr(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownD8Arr();

  inline bool isD16Arr();
  inline bool hasD16Arr();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getD16Arr();
  inline void setD16Arr( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setD16Arr(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initD16Arr(unsigned int size);
  inline void adoptD16Arr(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownD16Arr();

  inline bool isD32Arr();
  inline bool hasD32Arr();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getD32Arr();
  inline void setD32Arr( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setD32Arr(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initD32Arr(unsigned int size);
  inline void adoptD32Arr(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownD32Arr();

  inline bool isD64Arr();
  inline bool hasD64Arr();
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder getD64Arr();
  inline void setD64Arr( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setD64Arr(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder initD64Arr(unsigned int size);
  inline void adoptD64Arr(::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> disownD64Arr();

  inline bool isU8Arr();
  inline bool hasU8Arr();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getU8Arr();
  inline void setU8Arr( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setU8Arr(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initU8Arr(unsigned int size);
  inline void adoptU8Arr(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownU8Arr();

  inline bool isU16Arr();
  inline bool hasU16Arr();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getU16Arr();
  inline void setU16Arr( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setU16Arr(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initU16Arr(unsigned int size);
  inline void adoptU16Arr(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownU16Arr();

  inline bool isU32Arr();
  inline bool hasU32Arr();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getU32Arr();
  inline void setU32Arr( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setU32Arr(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initU32Arr(unsigned int size);
  inline void adoptU32Arr(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownU32Arr();

  inline bool isU64Arr();
  inline bool hasU64Arr();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getU64Arr();
  inline void setU64Arr( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setU64Arr(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initU64Arr(unsigned int size);
  inline void adoptU64Arr(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownU64Arr();

  inline bool isF32Arr();
  inline bool hasF32Arr();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getF32Arr();
  inline void setF32Arr( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setF32Arr(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initF32Arr(unsigned int size);
  inline void adoptF32Arr(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownF32Arr();

  inline bool isF64Arr();
  inline bool hasF64Arr();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getF64Arr();
  inline void setF64Arr( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setF64Arr(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initF64Arr(unsigned int size);
  inline void adoptF64Arr(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownF64Arr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PrimitiveData::Pipeline {
public:
  typedef PrimitiveData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::PrimitiveData::Which PrimitiveData::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::PrimitiveData::Which PrimitiveData::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool PrimitiveData::Reader::isD8() const {
  return which() == PrimitiveData::D8;
}
inline bool PrimitiveData::Builder::isD8() {
  return which() == PrimitiveData::D8;
}
inline  ::int8_t PrimitiveData::Reader::getD8() const {
  KJ_IREQUIRE((which() == PrimitiveData::D8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t PrimitiveData::Builder::getD8() {
  KJ_IREQUIRE((which() == PrimitiveData::D8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setD8( ::int8_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D8);
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isD16() const {
  return which() == PrimitiveData::D16;
}
inline bool PrimitiveData::Builder::isD16() {
  return which() == PrimitiveData::D16;
}
inline  ::int16_t PrimitiveData::Reader::getD16() const {
  KJ_IREQUIRE((which() == PrimitiveData::D16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PrimitiveData::Builder::getD16() {
  KJ_IREQUIRE((which() == PrimitiveData::D16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setD16( ::int16_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D16);
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isD32() const {
  return which() == PrimitiveData::D32;
}
inline bool PrimitiveData::Builder::isD32() {
  return which() == PrimitiveData::D32;
}
inline  ::int32_t PrimitiveData::Reader::getD32() const {
  KJ_IREQUIRE((which() == PrimitiveData::D32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PrimitiveData::Builder::getD32() {
  KJ_IREQUIRE((which() == PrimitiveData::D32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setD32( ::int32_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D32);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isD64() const {
  return which() == PrimitiveData::D64;
}
inline bool PrimitiveData::Builder::isD64() {
  return which() == PrimitiveData::D64;
}
inline  ::int64_t PrimitiveData::Reader::getD64() const {
  KJ_IREQUIRE((which() == PrimitiveData::D64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t PrimitiveData::Builder::getD64() {
  KJ_IREQUIRE((which() == PrimitiveData::D64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setD64( ::int64_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D64);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isU8() const {
  return which() == PrimitiveData::U8;
}
inline bool PrimitiveData::Builder::isU8() {
  return which() == PrimitiveData::U8;
}
inline  ::uint8_t PrimitiveData::Reader::getU8() const {
  KJ_IREQUIRE((which() == PrimitiveData::U8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PrimitiveData::Builder::getU8() {
  KJ_IREQUIRE((which() == PrimitiveData::U8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setU8( ::uint8_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U8);
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isU16() const {
  return which() == PrimitiveData::U16;
}
inline bool PrimitiveData::Builder::isU16() {
  return which() == PrimitiveData::U16;
}
inline  ::uint16_t PrimitiveData::Reader::getU16() const {
  KJ_IREQUIRE((which() == PrimitiveData::U16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PrimitiveData::Builder::getU16() {
  KJ_IREQUIRE((which() == PrimitiveData::U16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setU16( ::uint16_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U16);
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isU32() const {
  return which() == PrimitiveData::U32;
}
inline bool PrimitiveData::Builder::isU32() {
  return which() == PrimitiveData::U32;
}
inline  ::uint32_t PrimitiveData::Reader::getU32() const {
  KJ_IREQUIRE((which() == PrimitiveData::U32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PrimitiveData::Builder::getU32() {
  KJ_IREQUIRE((which() == PrimitiveData::U32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setU32( ::uint32_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U32);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isU64() const {
  return which() == PrimitiveData::U64;
}
inline bool PrimitiveData::Builder::isU64() {
  return which() == PrimitiveData::U64;
}
inline  ::uint64_t PrimitiveData::Reader::getU64() const {
  KJ_IREQUIRE((which() == PrimitiveData::U64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PrimitiveData::Builder::getU64() {
  KJ_IREQUIRE((which() == PrimitiveData::U64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setU64( ::uint64_t value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U64);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isF32() const {
  return which() == PrimitiveData::F32;
}
inline bool PrimitiveData::Builder::isF32() {
  return which() == PrimitiveData::F32;
}
inline float PrimitiveData::Reader::getF32() const {
  KJ_IREQUIRE((which() == PrimitiveData::F32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PrimitiveData::Builder::getF32() {
  KJ_IREQUIRE((which() == PrimitiveData::F32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setF32(float value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F32);
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isF64() const {
  return which() == PrimitiveData::F64;
}
inline bool PrimitiveData::Builder::isF64() {
  return which() == PrimitiveData::F64;
}
inline double PrimitiveData::Reader::getF64() const {
  KJ_IREQUIRE((which() == PrimitiveData::F64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PrimitiveData::Builder::getF64() {
  KJ_IREQUIRE((which() == PrimitiveData::F64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PrimitiveData::Builder::setF64(double value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F64);
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PrimitiveData::Reader::isD8Arr() const {
  return which() == PrimitiveData::D8_ARR;
}
inline bool PrimitiveData::Builder::isD8Arr() {
  return which() == PrimitiveData::D8_ARR;
}
inline bool PrimitiveData::Reader::hasD8Arr() const {
  if (which() != PrimitiveData::D8_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasD8Arr() {
  if (which() != PrimitiveData::D8_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getD8Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::D8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getD8Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setD8Arr( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setD8Arr(::kj::ArrayPtr<const  ::int8_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initD8Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D8_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptD8Arr(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownD8Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isD16Arr() const {
  return which() == PrimitiveData::D16_ARR;
}
inline bool PrimitiveData::Builder::isD16Arr() {
  return which() == PrimitiveData::D16_ARR;
}
inline bool PrimitiveData::Reader::hasD16Arr() const {
  if (which() != PrimitiveData::D16_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasD16Arr() {
  if (which() != PrimitiveData::D16_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getD16Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::D16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getD16Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setD16Arr( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setD16Arr(::kj::ArrayPtr<const  ::int16_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initD16Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D16_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptD16Arr(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownD16Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isD32Arr() const {
  return which() == PrimitiveData::D32_ARR;
}
inline bool PrimitiveData::Builder::isD32Arr() {
  return which() == PrimitiveData::D32_ARR;
}
inline bool PrimitiveData::Reader::hasD32Arr() const {
  if (which() != PrimitiveData::D32_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasD32Arr() {
  if (which() != PrimitiveData::D32_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getD32Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::D32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getD32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setD32Arr( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setD32Arr(::kj::ArrayPtr<const  ::int32_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initD32Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D32_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptD32Arr(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownD32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isD64Arr() const {
  return which() == PrimitiveData::D64_ARR;
}
inline bool PrimitiveData::Builder::isD64Arr() {
  return which() == PrimitiveData::D64_ARR;
}
inline bool PrimitiveData::Reader::hasD64Arr() const {
  if (which() != PrimitiveData::D64_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasD64Arr() {
  if (which() != PrimitiveData::D64_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getD64Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::D64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getD64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setD64Arr( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setD64Arr(::kj::ArrayPtr<const  ::int64_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initD64Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D64_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptD64Arr(
    ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::D64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownD64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::D64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isU8Arr() const {
  return which() == PrimitiveData::U8_ARR;
}
inline bool PrimitiveData::Builder::isU8Arr() {
  return which() == PrimitiveData::U8_ARR;
}
inline bool PrimitiveData::Reader::hasU8Arr() const {
  if (which() != PrimitiveData::U8_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasU8Arr() {
  if (which() != PrimitiveData::U8_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getU8Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::U8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getU8Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setU8Arr( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setU8Arr(::kj::ArrayPtr<const  ::uint8_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initU8Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U8_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptU8Arr(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U8_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownU8Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U8_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isU16Arr() const {
  return which() == PrimitiveData::U16_ARR;
}
inline bool PrimitiveData::Builder::isU16Arr() {
  return which() == PrimitiveData::U16_ARR;
}
inline bool PrimitiveData::Reader::hasU16Arr() const {
  if (which() != PrimitiveData::U16_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasU16Arr() {
  if (which() != PrimitiveData::U16_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getU16Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::U16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getU16Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setU16Arr( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setU16Arr(::kj::ArrayPtr<const  ::uint16_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initU16Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U16_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptU16Arr(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U16_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownU16Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U16_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isU32Arr() const {
  return which() == PrimitiveData::U32_ARR;
}
inline bool PrimitiveData::Builder::isU32Arr() {
  return which() == PrimitiveData::U32_ARR;
}
inline bool PrimitiveData::Reader::hasU32Arr() const {
  if (which() != PrimitiveData::U32_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasU32Arr() {
  if (which() != PrimitiveData::U32_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getU32Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::U32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getU32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setU32Arr( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setU32Arr(::kj::ArrayPtr<const  ::uint32_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initU32Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U32_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptU32Arr(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownU32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isU64Arr() const {
  return which() == PrimitiveData::U64_ARR;
}
inline bool PrimitiveData::Builder::isU64Arr() {
  return which() == PrimitiveData::U64_ARR;
}
inline bool PrimitiveData::Reader::hasU64Arr() const {
  if (which() != PrimitiveData::U64_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasU64Arr() {
  if (which() != PrimitiveData::U64_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getU64Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::U64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getU64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setU64Arr( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setU64Arr(::kj::ArrayPtr<const  ::uint64_t> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initU64Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U64_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptU64Arr(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::U64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownU64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::U64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isF32Arr() const {
  return which() == PrimitiveData::F32_ARR;
}
inline bool PrimitiveData::Builder::isF32Arr() {
  return which() == PrimitiveData::F32_ARR;
}
inline bool PrimitiveData::Reader::hasF32Arr() const {
  if (which() != PrimitiveData::F32_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasF32Arr() {
  if (which() != PrimitiveData::F32_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getF32Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::F32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getF32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::F32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setF32Arr( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setF32Arr(::kj::ArrayPtr<const float> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initF32Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F32_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptF32Arr(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F32_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownF32Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::F32_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PrimitiveData::Reader::isF64Arr() const {
  return which() == PrimitiveData::F64_ARR;
}
inline bool PrimitiveData::Builder::isF64Arr() {
  return which() == PrimitiveData::F64_ARR;
}
inline bool PrimitiveData::Reader::hasF64Arr() const {
  if (which() != PrimitiveData::F64_ARR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PrimitiveData::Builder::hasF64Arr() {
  if (which() != PrimitiveData::F64_ARR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader PrimitiveData::Reader::getF64Arr() const {
  KJ_IREQUIRE((which() == PrimitiveData::F64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::getF64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::F64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PrimitiveData::Builder::setF64Arr( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PrimitiveData::Builder::setF64Arr(::kj::ArrayPtr<const double> value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder PrimitiveData::Builder::initF64Arr(unsigned int size) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F64_ARR);
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PrimitiveData::Builder::adoptF64Arr(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<PrimitiveData::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, PrimitiveData::F64_ARR);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> PrimitiveData::Builder::disownF64Arr() {
  KJ_IREQUIRE((which() == PrimitiveData::F64_ARR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


